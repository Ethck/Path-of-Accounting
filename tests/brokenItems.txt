    # 1
    f"""Rarity: Rare
Corruption Spiker
Boot Blade
--------
Rune Dagger
Quality: +20% (augmented)
Physical Damage: 18-71 (augmented)
Elemental Damage: 20-33 (augmented)
Critical Strike Chance: 6.30%
Attacks per Second: 1.40
Weapon Range: 10
--------
Requirements:
Level: 68
Str: 62
Dex: 63
Int: 151
--------
Sockets: B-B-B 
--------
Item Level: 75
--------
30% increased Global Critical Strike Chance (implicit)
--------
71% increased Spell Damage
Adds 20 to 33 Fire Damage
Adds 25 to 47 Cold Damage to Spells
25% chance to Poison on Hit
35% increased Damage with Poison
Gain 5% of Non-Chaos Damage as extra Chaos Damage
+27% to Global Critical Strike Multiplier (crafted)
""",
    # 2
    f"""Rarity: Rare
Skull Pelt
Destroyer Regalia
--------
Quality: +15% (augmented)
Energy Shield: 179 (augmented)
--------
Requirements:
Level: 68
Dex: 106
Int: 151
--------
Sockets: B-G-B-B-B-B 
--------
Item Level: 82
--------
57% increased Energy Shield
+91 to maximum Life
+24% to Fire Resistance
+24% to Chaos Resistance
17% increased Stun and Block Recovery
--------
Corrupted
""",
    # 5
    f"""Rarity: Rare
Dread Hunger
Karui Chopper
--------
Two Handed Axe
Physical Damage: 80-125
Elemental Damage: 21-40 (augmented)
Critical Strike Chance: 5.00%
Attacks per Second: 1.15
Weapon Range: 13
--------
Requirements:
Level: 58
Str: 151 (unmet)
Dex: 43
--------
Sockets: G R 
--------
Item Level: 74
--------
Adds 21 to 40 Cold Damage
9% increased Global Accuracy Rating
11% reduced Enemy Stun Threshold
5% increased Light Radius
16% chance to Blind Enemies on Hit with Attacks
--------
Redeemer Item
""",
    # 11
    f"""Rarity: Normal
The Jeweller's Touch
--------
The Jeweller leaves five fingerprints and connects them with a single thread.
--------
You will create a fully-linked five-socket item with a single Jeweller's Orb
--------
Right-click to add this prophecy to your character.
--------
Note: ~price 9 chaos
""",
    # 16
    f"""Rarity: Rare
Dread Knot
Synthesised Ruby Ring
--------
Requirements:
Level: 48
--------
Item Level: 82
--------
13% reduced Reflected Damage taken (implicit)
20% increased Damage if Corrupted (implicit)
--------
7% increased Cold Damage
Adds 1 to 22 Lightning Damage to Attacks
+293 to Accuracy Rating
+13 to maximum Energy Shield
+65 to maximum Life
+1 Mana gained on Kill
--------
Corrupted
--------
Synthesised Item
""",

class TestBaseLookup(unittest.TestCase):
    @patch("tkinter.Tk", TkMock)
    @patch("tkinter.Toplevel", ToplevelMock)
    @patch("tkinter.Frame", FrameMock)
    @patch("tkinter.Label", LabelMock)
    @patch("tkinter.Button", ButtonMock)
    @patch("screeninfo.get_monitors", mock_get_monitors)
    @patch("time.sleep", lambda s: s)
    @patch("utils.config.USE_GUI", True)
    @patch("os.name", "Mock")
    def test_base_lookups(self):
        # Required to do the gui creation step in tests. We need to
        # create it here, after we patch our python modules.
        init_gui()

        # Mock json data for poe.ninja bases
        data = {
            "lines": [
                {
                    "baseType": "Boot Blade",
                    "levelRequired": 84,
                    "variant": None,
                    "corrupted": True,
                    "exaltedValue": 0.5,
                    "chaosValue": 80.0,
                    "itemType": "Dagger",
                },
                {
                    "baseType": "Boot Blade",
                    "levelRequired": 84,
                    "variant": "Elder",
                    "corrupted": True,
                    "exaltedValue": 0.5,
                    "chaosValue": 80.0,
                    "itemType": "Dagger",
                },
                {
                    "baseType": "Boot Blade",
                    "levelRequired": 84,
                    "variant": "Shaper",
                    "corrupted": True,
                    "exaltedValue": 0.5,
                    "chaosValue": 80.0,
                    "itemType": "Dagger",
                },
                {
                    "baseType": "Boot Blade",
                    "levelRequired": 84,
                    "variant": "Warlord",
                    "corrupted": True,
                    "exaltedValue": 0.5,
                    "chaosValue": 80.0,
                    "itemType": "Dagger",
                },
                {
                    "baseType": "Boot Blade",
                    "levelRequired": 84,
                    "variant": "Redeemer",
                    "corrupted": True,
                    "exaltedValue": 0.5,
                    "chaosValue": 80.0,
                    "itemType": "Dagger",
                },
                {
                    "baseType": "Boot Blade",
                    "levelRequired": 84,
                    "variant": "Crusader",
                    "corrupted": True,
                    "exaltedValue": 0.5,
                    "chaosValue": 80.0,
                    "itemType": "Dagger",
                },
                {
                    "baseType": "Boot Blade",
                    "levelRequired": 84,
                    "variant": "Hunter",
                    "corrupted": False,
                    "exaltedValue": 0.5,
                    "chaosValue": 80.0,
                    "itemType": "Dagger",
                },
            ]
        }

        # mockign the list of mods from poe api
        mods = {
            "result": [
                {
                    "label": "Pseudo",
                    "entries": [
                        {
                            "id": "pseudo.pseudo_total_cold_resistance",
                            "text": "+#% total to Cold Resistance",
                            "type": "pseudo",
                        }
                    ],
                }
            ]
        }

        expected = [lambda v: "[$]" in v, lambda v: "[!]" in v]

        
        with requests_mock.Mocker(real_http=True) as mock:
            web.ninja_bases = []
            mock.get(
                "https://poe.ninja/api/data/itemoverview?league=Standard&type=BaseType&language=en",
                json=data,
            )
            with open('tests/mockModifiers.txt') as f:
                        mock.get("https://www.pathofexile.com/api/trade/data/stats", json=json.load(f))
            with open('tests/mockItems.txt') as f:
                mock.get("https://www.pathofexile.com/api/trade/data/items", json=json.load(f))

            for i in range(len(items[:2])):
                item = items[i]
                with self.assertLogs(level="INFO") as logger:
                    Accounting.search_ninja_base(item)
                    [output] = logger.output[-1:]
                    self.assertTrue(expected[i](output))

            # We'll take the first sample item and modify it so that we
            # can match against all types of influences we support.
            item = items[0]

            supportedInfluence = [
                "Elder",
                "Shaper",
                "Warlord",
                "Redeemer",
                "Crusader",
                "Hunter",
            ]

            for inf in supportedInfluence:
                current = item + ("\n--------\n%s Item\n" % inf)
                with self.assertLogs(level="INFO") as logger:
                    Accounting.search_ninja_base(current)
                    [output] = logger.output[-1:]
                    self.assertTrue(expected[0](output))
        close_all_windows()